#!/bin/sh

# Keith Jolley
# Mon Feb 11 03:16:20 PST 2019
#
# This configures a bootstrap host ready to build the entire gitlab
# Using this is entirely optional, it just guarantees a clean
# environment that will reliably work with all the needed tools.

me=$( basename "${0}" )

if [ $# -eq 0 ]
then
    echo "USAGE: '${me} username"
    echo "Creates and configures an ec2 bootstrap host"
    echo "Uses ~/.aws/credentials_'username' for"
    echo "AWS credentials. This will be in the default"
    echo "region of 'username'. It's not necessarily the"
    echo "same region as the final install will be but"
    echo "that will be taken care of later."
    echo "Creates ~/.aws/secret_'username'.pem"
    echo "if it doesn't already exist."
    echo "Creates ~/.aws/secret_'username'.pub"
    echo "if it doesn't already exist."
    exit 1
fi

username="$1"
region="$(aws configure get region)"

credentials="${HOME}/.aws/credentials_${username}"
if  [ ! -r "$credentials" ] || [ ! -f "$credentials" ]
then
    echo "ERROR: can't read awscred file '$credentials'"
    exit 2
fi

instance_type="t2.micro"
ami_id="ami-01ed306a12b7d1c96"

# mktemp has different behaviours on different os's. On some it
# looks like I don't know what I'm doing with all the Xs, on others
# the Xs are required.
tmp_pem_file="$(mktemp -t "${me}.pem.XXXXXXXX")"
pem_file="${HOME}/.aws/secret_${username}.pem"
pub_file="${HOME}/.aws/secret_${username}.pub"
if [ ! -f "${pem_file}" ]
then
    echo "Creating pem file: ${pem_file}"
    if aws ec2 create-key-pair --key-name "${username}" --query 'KeyMaterial' --output text > "${tmp_pem_file}"
    then
        mv "${tmp_pem_file}" "${pem_file}"
    fi
    chmod 0600 "${pem_file}"
    rm -f "${tmp_pem_file}"
fi
ssh-keygen -y -f "${pem_file}" > "${pub_file}"
chmod 0600 "${pem_file}"

# See if we need to create the key pair in the default region:
if ! aws ec2 describe-key-pairs --key-name "${username}" 2>/dev/null
then
  aws ec2 import-key-pair --key-name "${username}" --public-key-material 'file://~/.aws/secret_Bjork.pub'
fi

# This doesn't return the public ip so we need to query later.
echo "Launching bootstrap instance."
instance_id="$(aws ec2 run-instances --image-id "$ami_id" --instance-type "$instance_type"                  \
        --key-name "${username}" --output text --query 'Instances[0].InstanceId'                            \
        --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=bootstrap_'"${username}"'}]')"

state=
while [ "${state}" != "running" ]
do
    state="$(aws ec2 describe-instances --instance-ids "${instance_id}"             \
                --output text                                                       \
                --query 'Reservations[0].Instances[0].State.Name')"
    echo "Waiting for bootstrap host to boot. Current state: '${state}'."
    sleep 5
done

PublicDnsName="$(aws ec2 describe-instances --instance-ids "${instance_id}"         \
                --output text                                                       \
                --query 'Reservations[0].Instances[0].PublicDnsName')"
PublicIpAddress="$(aws ec2 describe-instances --instance-ids "${instance_id}"       \
                --output text                                                       \
                --query 'Reservations[0].Instances[0].PublicIpAddress')"

# Sometimes `get-console-output` returns zero data.
# Kicking it a couple of times seems to help.
console_output_file="$(mktemp -t "${me}.console.XXXXXXXX")"

n=0
haskeys=0
/bin/echo -n "Getting console output to make sure our ssh keys match."
while [ "${n}" -lt 5 ] && [ "${haskeys}" -eq 0 ]
do
    /bin/echo -n ".."
    aws ec2 get-console-output --instance-id "${instance_id}" --output text > "${console_output_file}"
    (( ++n ))  # Fun fact: (( n++ )) return 1 when n=0. (( ++n )) does not.
    # Because grep returns 1 if no match and '-e' is set. 
    haskeys="$(sed -n "/SSH HOST KEY FINGERPRINTS/p" "${console_output_file}" | wc -l)"
    sleep 6
done

echo ""
echo "The bootstrap host is booting now."
echo ""
echo "Testing login. This may take a few moments while the bootstrap host finishes booting."
echo "If successful then the next step will be install required software."
echo ""
echo "Several timeout failures are normal (give it a about a minute)."
echo ""

if [ "${haskeys}" -eq 0 ]
then
    echo "The AWS console occasionally doesn't work. Now is one of those times."
    echo "This means we have no way of verifying our ssh keys match."
    echo "The odds are slim that this is a problem but for production use this"
    echo "would need to be investigated before proceeding."
else
    echo "The first time you ssh into this host it's going to ask you if you trust the fingerprint."
    echo "Here are the ssh-keys as reported from the host console. There should be a match."
    sed -n '/\(-----.* SSH HOST KEY FINGERPRINTS-----\)/,//p' "${console_output_file}" 
fi
shred "${console_output_file}" || rm -f "${console_output_file}"
echo ""

# In case you are wondering, ssh '-A' brings along your existing key(s)
# so that you don't have to include the '-i pem_file' while bouncing
# from host with the same keys.  '-o IdentitiesOnly=yes' means to
# only use the identities provide.  I'd use `ssh-add` but the sshd
# on centos only checks 6 keys before it decides you are a bad guy
# and closes the connection - and just because you specify one on
# the command line doesn't mean it's going to try that one first. :/

until ssh -o ConnectTimeout=5 -i "${pem_file}" centos@${PublicDnsName} echo '"Success! $(hostname)"'
do
    sleep 5
done

echo "Installing required software on the bootstrap host"

ssh -i "${pem_file}" centos@${PublicDnsName} bash <<EOF
echo ""
echo "Updating system with 'yum'."
sudo yum -y upgrade

echo ""
echo "Installing git and bzip."
sudo yum -y install git bzip2

echo ""
curl -o /tmp/miniconda.37.repo.sh "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
bash /tmp/miniconda.37.repo.sh -b
rm /tmp/miniconda.37.repo.sh

cat >> ~/.bashrc << EOF_1
##
# added by '${me}'
# '$(date)'
#
alias l='ls -CF'
alias ll='ls -la'
#
export PATH="/home/centos/gitlab-aws/bin:/home/centos/gitlab-aws/bin/Linux:/home/centos/miniconda3/bin:/usr/local/bin:/usr/bin:/usr/sbin::/home/centos/bin:"
#
##
EOF_1

[ ! -d ~/.aws ] && mkdir ~/.aws; chmod 0700 ~/.aws
[ -f ~/.bashrc ] && source ~/.bashrc
[ -f ~/miniconda3/etc/profile.d/conda.sh ] && source ~/miniconda3/etc/profile.d/conda.sh

echo ""
echo "Updating miniconda"
conda update -y conda

echo ""
echo "Installing ansible, awscli, boto3, and terraform"
conda install -y -c conda-forge ansible awscli boto3 terraform

echo ""
echo "Cloning the gitlab-aws repo"
git clone https://github.com/keithpjolley/gitlab-aws.git

echo ""
echo "Behold!"
cd gitlab-aws
pwd
ls -CF

echo ""
EOF

# Ideally this would be done in the $ENV. Version 2.
echo "Copying credentials to bootstrap host"
tmp_credentials_file="$(mktemp -t "${me}.credentials.XXXXXXXX")"
( sed  's/\(\[ *\)\('"${username}"'\)\( *\]\)/\1default\3/' "${credentials}";    \
  echo "";                                                                       \
  cat "${credentials}" )                                                         \
> "${tmp_credentials_file}"
scp -i "${pem_file}" "${tmp_credentials_file}" "centos@${PublicDnsName}:.aws/credentials"
scp -i "${pem_file}" "${pem_file}" "centos@${PublicDnsName}:.aws/"
(shred "${tmp_credentials_file}" | rm -f "${tmp_credentials_file}") 2>/dev/null


echo "When you are ready: run 'bootstrap.py region_name'"
echo "Any questions please let me know!"
echo ""
echo "Get ready to run:"
echo "ssh -Ai "${pem_file}" centos@${PublicDnsName}"
echo "$ cd gitlab-aws"
echo "$ bin/build_gitlab --profile username --region region"

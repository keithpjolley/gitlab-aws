#! /usr/bin/env python
# -*- coding: UTF8 -*-

"""
This is a minimal script to create a new IAM user and
group that will have the ability create the bootstrap
environment.

Creates ~/.aws/credentials_user and

Policy is read from './additional/access_policy.json'.

An existing user of the same name needs to be deleted first.

I'm not sure yet how much it's needed so not doing much in the
way of error checking or corner cases.

Keith Jolley
Tue Feb 11 06:27:45 PST 2019
"""

import os
import re
import sys
import boto3
from pathlib import Path

def create_user(client, iam, creator, username, policy_dir, region):
    """
    Creates the named user using the `iam` client.
    Adds permissions to the group by importing "./policy_dir/*.json".
    Creates a credentials file: ~/.aws/credentials.name
    Best practice would be to create separate IAM policies, attach those to groups,
    and add this user to that group.
    """
    # Create the user.

    response = client.create_user(
        UserName = username,
        Tags = [{ 'Key': 'Created_By', 'Value': creator }]
    )
    user = iam.User(response['User']['UserName'])

    access_key_pair = user.create_access_key_pair()
    cred_file = Path("~/.aws/credentials_" + username).expanduser()
    with open(str(cred_file), 'w') as f:
        f.write('[' + access_key_pair.user_name + ']\n')
        f.write('aws_access_key_id = ' + access_key_pair.id + '\n')
        f.write('aws_secret_access_key = ' + access_key_pair.secret + '\n')
        f.write('region = ' + region + '\n')
    cred_file.chmod(0o600)

    response = client.create_group(
        GroupName = username + "_group"
    )
    group = iam.Group(response['Group']['GroupName'])
    response = group.add_user(UserName=username)

    group_policy = iam.GroupPolicy(
        group_name = username + "_group",
        name = username + "_policy"
    )

    for policy_doc in Path(policy_dir).glob('**/policy_*.json'):
        # I know this works because I've tried everything that doesn't.
        with open(policy_doc) as f:
            data = f.read()
        response = group_policy.put(
            PolicyDocument = data
        )

    give_perms_to_gitlab_app_server(user)

    return cred_file


def give_perms_to_gitlab_app_server(user):
    # This is bad.
    region_ami = {
        "ap-northeast-1" : "ami-09f055813513af711",
        "ap-northeast-2" : "ami-0b50cdd40c8c2b246",
        "ap-south-1"     : "ami-05175a7945879e088",
        "ap-southeast-1" : "ami-07667a2b70b86c89c",
        "ap-southeast-2" : "ami-0ef794d0c41209e6f",
        "ca-central-1" : "ami-0b92dae13b3e44bec",
        "eu-central-1" : "ami-02b914cc3320872bf",
        "eu-north-1" : "ami-0ab9180deb89de065",
        "eu-west-1" : "ami-0a29229fb86522bdf",
        "eu-west-2" : "ami-0f05a6449bf35d8eb",
        "eu-west-3" : "ami-00d1e697d702bf50b",
        "sa-east-1" : "ami-0d290a3951a3527a6",
        "us-east-1" : "ami-055b00fcd4fa16e29",
        "us-east-2" : "ami-05fdc59ea810b5079",
        "us-west-1" : "ami-05d6080881e349b31",
        "us-west-2" : "ami-03e3f3c0654a308fd",
    }

    def add_profile(region):
        client = boto3.client('ec2', region_name=region)
        return client.modify_image_attribute(
            ImageId=region_ami[region],
            LaunchPermission={'Add':[{'UserId':user.user_name}]}
        )
    add_profile('eu-west-1')
    
        
    [add_profile(region) for region in region_ami]

    return


if __name__ == "__main__":

    me = os.path.basename(sys.argv[0])

    if(len(sys.argv) < 2) or ((sys.argv[1] == "-h") or (sys.argv[1]) == "--help"):
        msg = "USAGE: '{} name [policy_dir [default_region]]' -- Creates an IAM profile for the bootstrap environment."
        print(msg.format(me))
        sys.exit(0)

    # only lowercase and dashes allowed
    username = re.sub(r'[^\w-]|_', '-', sys.argv[1]).lower()

    if(username != sys.argv[1]):
        print("ERROR: {}: username '{}' must only contain only lowercase letters, numbers, and dashes.".format(
            username));
        sys.exit(1)

    policy_dir = './policies/group'
    if(len(sys.argv) > 2):
        policy_document = sys.argv[2]

    region = 'us-west-2'
    if(len(sys.argv) > 3):
        region = sys.argv[3]

    client = boto3.client('iam')
    iam = boto3.resource('iam')

    cred_file = create_user(client, iam, me, username, policy_dir, region)
    print("Created credentials file: " + str(cred_file))
